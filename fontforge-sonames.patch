--- fontforge-20040404/fontforge/freetype.c.orig	2003-07-01 22:38:00.000000000 +0200
+++ fontforge-20040404/fontforge/freetype.c	2003-08-08 23:03:00.000000000 +0200
@@ -132,7 +132,7 @@
 # endif
 
 static int freetype_init_base() {
-    libfreetype = dlopen("libfreetype" SO_EXT,RTLD_LAZY);
+    libfreetype = dlopen(LIBFREETYPE_SONAME,RTLD_LAZY);
     if ( libfreetype==NULL )
 return( false );
 
--- fontforge-20050310/fontforge/start.c.orig	2005-02-18 05:32:53.000000000 +0100
+++ fontforge-20050310/fontforge/start.c	2005-04-30 15:04:22.807032552 +0200
@@ -100,9 +100,9 @@
 
 # ifdef LIBDIR
 #  if !defined(_NO_SNPRINTF) && !defined(VMS)
-	snprintf( full, sizeof(full), "%s/%s", LIBDIR, buf );
+	snprintf( full, sizeof(full), "%s/%s%s", LIBDIR, buf, LIBUNINAMESLIST_SOEXT );
 #  else
-	sprintf( full, "%s/%s", LIBDIR, buf );
+	sprintf( full, "%s/%s%s", LIBDIR, buf, LIBUNINAMESLIST_SOEXT );
 #  endif
 	libuninames = dlopen( full,RTLD_LAZY);
 # endif
--- fontforge-20051205/fontforge/svg.c.orig	2005-10-18 06:44:21.000000000 +0200
+++ fontforge-20051205/fontforge/svg.c	2005-12-25 01:55:05.000000000 +0100
@@ -773,7 +773,7 @@
     if ( xmltested )
 return( libxml!=NULL );
 
-    libxml = dlopen( "libxml2" SO_EXT,RTLD_LAZY);
+    libxml = dlopen(LIBXML2_SONAME,RTLD_LAZY);
     xmltested = true;
     if ( libxml==NULL )
 return( false );
--- fontforge-20051028/gdraw/gchardlg.c.orig	2005-09-30 03:19:49.000000000 +0200
+++ fontforge-20051028/gdraw/gchardlg.c	2005-10-29 21:25:59.401142888 +0200
@@ -345,10 +345,10 @@
 #else
     DL_CONST void *libuninames=NULL;
 # ifdef LIBDIR
-    libuninames = dlopen( LIBDIR "/" "libuninameslist" SO_EXT,RTLD_LAZY);
+    libuninames = dlopen( LIBDIR "/" "libuninameslist" LIBUNINAMESLIST_SOEXT,RTLD_LAZY);
 # endif
     if ( libuninames==NULL )
-	libuninames = dlopen( "libuninameslist" SO_EXT,RTLD_LAZY);
+	libuninames = dlopen( "libuninameslist" LIBUNINAMESLIST_SOEXT,RTLD_LAZY);
     if ( libuninames!=NULL )
 	_UnicodeNameAnnot = dlsym(libuninames,"UnicodeNameAnnot");
 #endif
--- pfaedit-030803/gdraw/gimagereadgif.c.orig	2003-03-11 00:37:19.000000000 +0100
+++ pfaedit-030803/gdraw/gimagereadgif.c	2003-08-08 22:55:56.000000000 +0200
@@ -48,9 +48,7 @@
 static int loadgif() {
     char *err;
 
-    libgif = dlopen("libungif" SO_EXT,RTLD_LAZY);
-    if ( libgif==NULL )
-	libgif = dlopen("libgif" SO_EXT,RTLD_LAZY);
+    libgif = dlopen(LIBUNGIF_SONAME,RTLD_LAZY);
     if ( libgif==NULL ) {
 	GDrawIError("%s", dlerror());
 return( 0 );
--- pfaedit-030803/gdraw/gimagereadjpeg.c.orig	2003-03-11 00:37:19.000000000 +0100
+++ pfaedit-030803/gdraw/gimagereadjpeg.c	2003-08-08 22:56:50.000000000 +0200
@@ -52,7 +52,7 @@
 static int loadjpeg() {
     char *err;
 
-    libjpeg = dlopen("libjpeg" SO_EXT,RTLD_LAZY);
+    libjpeg = dlopen(LIBJPEG_SONAME,RTLD_LAZY);
     if ( libjpeg==NULL ) {
 	GDrawIError("%s", dlerror());
 return( 0 );
--- pfaedit-030803/gdraw/gimagereadpng.c.orig	2003-03-11 00:37:19.000000000 +0100
+++ pfaedit-030803/gdraw/gimagereadpng.c	2003-08-08 23:35:01.000000000 +0200
@@ -59,9 +59,9 @@
 
 static int loadpng() {
 #  if !defined(_LIBPNG12)
-    libpng = dlopen("libpng" SO_EXT,RTLD_LAZY);
+    libpng = dlopen(LIBPNG_SONAME,RTLD_LAZY);
 #  else		/* After version 1.2.1 (I think) dynamic libpng is called libpng12 */
-    libpng = dlopen("libpng12" SO_EXT,RTLD_LAZY);
+    libpng = dlopen(LIBPNG12_SONAME,RTLD_LAZY);
 #  endif
     if ( libpng==NULL ) {
 	GDrawIError("%s", dlerror());
--- pfaedit-030803/gdraw/gimagereadtiff.c.orig	2003-03-11 00:37:19.000000000 +0100
+++ pfaedit-030803/gdraw/gimagereadtiff.c	2003-08-08 22:57:41.000000000 +0200
@@ -47,7 +47,7 @@
 static int (*_TIFFClose)(TIFF *);
 
 static int loadtiff() {
-    libtiff = dlopen("libtiff" SO_EXT,RTLD_LAZY);
+    libtiff = dlopen(LIBTIFF_SONAME,RTLD_LAZY);
     if ( libtiff==NULL ) {
 	GDrawIError("%s", dlerror());
 return( 0 );
--- pfaedit-030803/gdraw/gimagewritejpeg.c.orig	2003-03-11 00:37:19.000000000 +0100
+++ pfaedit-030803/gdraw/gimagewritejpeg.c	2003-08-08 22:58:06.000000000 +0200
@@ -55,7 +55,7 @@
 static int loadjpeg() {
     char *err;
 
-    libjpeg = dlopen("libjpeg" SO_EXT,RTLD_LAZY);
+    libjpeg = dlopen(LIBJPEG_SONAME,RTLD_LAZY);
     if ( libjpeg==NULL ) {
 	GDrawIError("%s", dlerror());
 return( 0 );
--- pfaedit-030803/gdraw/gimagewritepng.c.orig	2003-03-11 00:37:19.000000000 +0100
+++ pfaedit-030803/gdraw/gimagewritepng.c	2003-08-08 23:35:28.000000000 +0200
@@ -53,9 +53,9 @@
 
 static int loadpng() {
 #  if !defined(_LIBPNG12)
-    libpng = dlopen("libpng" SO_EXT,RTLD_LAZY);
+    libpng = dlopen(LIBPNG_SONAME,RTLD_LAZY);
 #  else		/* After version 1.2.1 (I think) dynamic libpng is called libpng12 */
-    libpng = dlopen("libpng12" SO_EXT,RTLD_LAZY);
+    libpng = dlopen(LIBPNG12_SONAME,RTLD_LAZY);
 #  endif
     if ( libpng==NULL ) {
 	GDrawIError("%s", dlerror());
--- fontforge-20060822/configure.in.orig	2006-08-18 21:33:41.000000000 +0200
+++ fontforge-20060822/configure.in	2006-09-16 13:59:22.074816500 +0200
@@ -165,13 +165,31 @@
  AC_CHECK_FILE(/usr/local/include/libxml2/libxml,[CFLAGS="$CFLAGS -I/usr/local/include -I/usr/local/include/libxml2/"],
   AC_DEFINE(_NO_LIBXML))])
 
+AC_DEFUN([CHECK_SONAME], [
+	dir=NONE
+	libname=lib[$1]
+	for d in /lib64 /lib /usr/lib64 /usr/lib /usr/X11R6/lib64 /usr/X11R6/lib ; do
+		if test -f $d/${libname}.so ; then
+			dir=$d
+		fi
+	done
+	if test "$dir" = "NONE"; then
+		libsoname=${libname}.so
+	else
+		libsoname="`objdump -p ${dir}/${libname}.so | awk '/SONAME/ { print $[]2 }'`"
+	fi
+	AC_DEFINE_UNQUOTED([AS_TR_CPP([lib$1]_SONAME)], ["$libsoname"], [$1 SONAME])
+])
+
 dnl Some old versions of lib(un)gif don't work for us, they've got the
 dnl Function argument in the wrong place. So check the header files.
 dnl check for both libgif and libungif, I think they use the same args.
 
 AC_CHECK_LIB(gif, DGifOpenFileName, [
 echo -n checking for ExtensionBlock.Function in gif_lib.h...
-AC_TRY_COMPILE([#include <gif_lib.h>], [ ExtensionBlock foo; foo.Function=3; ], echo " " yes , [echo " " no
+AC_TRY_COMPILE([#include <gif_lib.h>], [ ExtensionBlock foo; foo.Function=3; ],
+	[ echo " " yes
+	CHECK_SONAME(ungif)], , [echo " " no
     ac_cv_lib_ungif_DGifOpenFileName=no
     AC_DEFINE(_NO_LIBUNGIF)])
 ] , [
@@ -187,19 +205,20 @@
 dnl zlib.h because we never use it directly, only used inside libpng)
 
 AC_CHECK_LIB(z, deflateEnd, : ,AC_DEFINE(_NO_LIBPNG), -lm) 
-AC_CHECK_LIB(png, png_create_read_struct, : ,[
- AC_CHECK_LIB(png12, png_create_read_struct, AC_DEFINE(_LIBPNG12), AC_DEFINE(_NO_LIBPNG), -lz -lm)], -lz -lm)
+AC_CHECK_LIB(png, png_create_read_struct, [CHECK_SONAME(png)] ,[
+ AC_CHECK_LIB(png12, png_create_read_struct, [AC_DEFINE(_LIBPNG12)
+   CHECK_SONAME(png12)], AC_DEFINE(_NO_LIBPNG), -lz -lm)], -lz -lm)
 AC_CHECK_HEADER(png.h, : , AC_DEFINE(_NO_LIBPNG))
-AC_CHECK_LIB(jpeg, jpeg_CreateDecompress, :  ,AC_DEFINE(_NO_LIBJPEG)) 
+AC_CHECK_LIB(jpeg, jpeg_CreateDecompress, [CHECK_SONAME(jpeg)] ,AC_DEFINE(_NO_LIBJPEG)) 
 AC_CHECK_HEADER(jpeglib.h, : , AC_DEFINE(_NO_LIBJPEG))
-AC_CHECK_LIB(tiff, TIFFOpen, : , AC_DEFINE(_NO_LIBTIFF), -lm )
+AC_CHECK_LIB(tiff, TIFFOpen, [CHECK_SONAME(tiff)] , AC_DEFINE(_NO_LIBTIFF), -lm )
 AC_CHECK_HEADER(tiffio.h, : , AC_DEFINE(_NO_LIBTIFF))
 case "$host" in
 *-pc-cygwin*)
  AC_CHECK_LIB(xml2, xmlParseFile, : , AC_DEFINE(_NO_LIBXML), [-liconv -lz])
  ;;
 *)
- AC_CHECK_LIB(xml2, xmlParseFile, : , AC_DEFINE(_NO_LIBXML))
+ AC_CHECK_LIB(xml2, xmlParseFile, [CHECK_SONAME(xml2)] , AC_DEFINE(_NO_LIBXML))
  ;;
 esac
 
@@ -247,7 +266,7 @@
 if test "$gww_hasbytecode" = "yes" ; then
  AC_CHECK_LIB(pthread, pthread_create, LIBS="$LIBS -lpthread", gww_hasbytecode="no")
 fi
-
+CHECK_SONAME(freetype)
 if test \( "$gww_hasbytecode" = "yes" \) -a \( "$FreeType2_IncRoot" != "" \); then
  gww_hasbytecode="no"
  AC_ARG_WITH(freetype-src,
@@ -374,6 +393,7 @@
    STATIC_LIBS="$STATIC_LIBS -luninameslist"
    AC_DEFINE(_STATIC_LIBUNINAMESLIST) ] , AC_DEFINE(_NO_LIBUNINAMESLIST))
 fi
+AC_DEFINE_UNQUOTED([LIBUNINAMESLIST_SOEXT],[".so.0"],[libuninameslist ext])
 
 dnl used to check for gettext here, but we require a version with b_t_c
 dnl and not all libintls have that. So check for it instead.
